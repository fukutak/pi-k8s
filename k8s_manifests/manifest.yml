# Volumeをマウントする領域の確保
apiVersion: v1
kind: PersistentVolume
metadata:
  name: docroot
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/home/pi/build"
---
# Volumeを要求してあう領域を確保する
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docroot-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# NginxのconfigMapの作成
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    server {
      listen     80;
      server_tokens on;
      location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
      }
    }
---
apiVersion: "v1"
kind: "Secret"
metadata:
  name: "nginxsecret"
  namespace: "default"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNLRENDQVpHZ0F3SUJBZ0lVTEZ3RXFSS08yTnNIM2hpV3VwUXRhNFJYSzVVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pqRVJNQThHQTFVRUF3d0liWGt0Ym1kcGJuZ3hFVEFQQmdOVkJBb01DRzE1TFc1bmFXNTRNQjRYRFRJeApNVEV3TWpFNE16VXpPRm9YRFRJeU1URXdNakU0TXpVek9Gb3dKakVSTUE4R0ExVUVBd3dJYlhrdGJtZHBibmd4CkVUQVBCZ05WQkFvTUNHMTVMVzVuYVc1NE1JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R05BRENCaVFLQmdRQ2gKakNqVFRtN1hwaVJqM09DcGtEbUFYd2ZMY1F4cTN5VkZXdmQxT2J1ZVFYeFZVYTZPZytRNzM2RXlkTmlRdXgrTQo4RDJZMjNvVHEwSEpSdVlSRzdXOVlFYUttaS91UExzZ3U5QVdTNkVUSFNZdXUwcmt1cmRYVk1MK2czenJ3UmRlClpvR2hybmdzbExkcDBhNGN0YUlrTXhUUXlMd0JUUkFlV0d0bWVBc3ZXd0lEQVFBQm8xTXdVVEFkQmdOVkhRNEUKRmdRVU05cTBMSUgvdEJjM2FBdjIyOFYxcXRnTkpmRXdId1lEVlIwakJCZ3dGb0FVTTlxMExJSC90QmMzYUF2MgoyOFYxcXRnTkpmRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQmdRQWNOc1BLCnRQVGs4cFNMUnJybnhzVFV1RG4yZjFHV3pBN1V5YUp0S2JQU2FNRm9NSnVWNHdBTXM4dlpHNC9jNTNZaTlmckgKdUVOSU5PVWk4ekF2T0ZacWR5M2lzYXpUcVEzKzkvdHN1OFhCcWxMdlJZUHpFSW11UWwrK2ZLV2dHbUFvWGRKSwpOcWFaZHJyN1JhR3o1UE5DUjh2akpWNHNkNGEra0RMTFh5NlMzdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNlQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Jd2dnSmVBZ0VBQW9HQkFLR01LTk5PYnRlbUpHUGMKNEttUU9ZQmZCOHR4REdyZkpVVmE5M1U1dTU1QmZGVlJybzZENUR2Zm9USjAySkM3SDR6d1BaamJlaE9yUWNsRwo1aEVidGIxZ1JvcWFMKzQ4dXlDNzBCWkxvUk1kSmk2N1N1UzZ0MWRVd3Y2RGZPdkJGMTVtZ2FHdWVDeVV0Mm5SCnJoeTFvaVF6Rk5ESXZBRk5FQjVZYTJaNEN5OWJBZ01CQUFFQ2dZRUFrSERHUy9DVDhLTHZaSTZvSFZRRDVjQ1MKTXBkNGw5RysvRjBTWnJEaERPWFdhbDZuS1d2SjFMTGw2VHhLS2xYMUpzbmkrVm83czN4clRMRGtvaVZaZjNiNwppOVZzaFpnVUpMOC9DcjNPb2psbThITDJrRXZsRUEyOCtkMTNWbHpPeXJtMitVWlI3QS81d0l2YnRUZHFNWFBpCmx0VVNMQ1RkSUcyQmtidCs2REVDUVFETXNNMXJPMTRkRDJUTWp5SFN1WjZXR085R3pwZkQ1NXBBNUNwYUo1UncKbWtoQ0VFL20wSFdrOHZJa1ZSTWtCeXk3djQzbmpsZ3RqYUYzSlFWcWFoenpBa0VBeWdyUjVvZ2lEOGwwdS9GYwpBbnhKckhCK3Z5R1lEczJ4dHhYUDZKMzVPTytFUzdHSVVJMG5vN3pVR05IY2UySTZ0TlV5K29OZUJ2Ym9MeXpwCmhaeWQrUUpCQUpHcXROVStENURndHB3NHRCcFJqSUZHeDJsOWRsV3RTWUlxbmRWQTI0dHkwRDlyZW1GSk1wK3IKWVJUb0VsSU9aUkJMbHNJVjg3eWZVU3dJQloyZ1hHOENRUUNoUGxkY0kwTUQxR1JjWmZobloyZW92akw1T01kUQo4U29ta3JyVnk5V05jZUhrUXZBbVVURFVoU3ZFRHlCbU8vUGNROVltaGRieHVmVjlTTnVwclYrSkFrQjJzTkFrCkh0bEkvSFdGYk9OekVxS3BWejdMWVJ6TEJ4NFpjdlRGSXNnSkhYWjhxY1dIUzJ0ZzIxY0VHM1lBSTdROHVOcmoKWHZmZWlGdFBIRHZjcjhZdQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="

---
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    nodePort: 30001
    protocol: TCP
    name: https
  selector:
    run: my-nginx
---
# Deploymentの定義
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
spec:
  selector:
    matchLabels:
      run: my-nginx
  replicas: 4
  template:
    metadata:
      labels:
        run: my-nginx
    spec:
      containers:
        - name: nginxhttps
          image: nginx
          ports:
          - containerPort: 443
          - containerPort: 80
          volumeMounts:
          - name: conf
            mountPath: /etc/nginx/conf.d/
          - name: docrootc
            mountPath: /usr/share/nginx/html
            readOnly: true
          - name: secret-volume
            mountPath: /etc/nginx/ssl
      volumes:
        - name: secret-volume
          secret:
            secretName: nginxsecret
        - name: conf
          configMap:
            name: nginx-conf
        - name: docrootc
          persistentVolumeClaim:
            claimName: docroot-claim
---
# WIP Ingress resource
---
# nodeに直接リクエストするのではなく、lbを使ってリクエストを捌くようにする
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress-my-nginx
# spec:
#   rules:
#   - host: pi-worker1
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: my-nginx
#             port: 
#               number: 80
#   ingressClassName: nginx
            # servicePort: 30000
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: minimal-ingress
#   annotations:
#     kubernetes.io/ingress.class: nginx
# spec:
#   rules:
#   - host: pi-master
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: my-nginx
#             port:
#               number: 80
---
